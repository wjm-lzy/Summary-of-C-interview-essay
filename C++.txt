# 美团1
### 内存static和dynamic的区别
static（静态）​​ 和 ​​dynamic（动态）<br>
static:内存分配在编译的时候确定，大小和生命周期固定，无需运行时分配开销<br>
dynamic:内存分配在运行时动态申请和释放（new），适应不确定的需求<br>

### const 修饰的变量，可以被修改吗
可以通过引用修改<br>
实例代码如下<br>
const int x = 100;<br>
int *p = (int*)&x;//得到x的地址，通过定义指针接收<br>
*p = 200;<br>
上述代码就可以绕过const的限制<br>

### 智能指针的介绍
使用智能指针式为了自动释放资源，避免内存泄漏（忘记delete）和程序崩溃（多次delete）<br>
C++11引入了如下智能指针：包含在头文件<memory>中<br>
1.std::unique_ptr(独占所有权)<br>
  同一时间只能有一个unique_ptr拥有资源，不可复制，但支持移动语义（std::move）(补充：相信有的朋友不知道什么是移动语义，这道题结束介绍)<br>
  管理动态分配的单个对象或者数组<br>
  代码实例：<br>
    std::unique_ptr<int> p1 = std::make_unique<int>(10);<br>
    std::unique_ptr<int[]> p2 = std::make_unique<int>(5);<br>
    //转移所有权<br>
    std::unique_ptr<int> p3 = std::move(p1);<br>
2.std::shared_ptr(共享所有权)<br>
  多个shared_ptr共享一个资源，通过引用计数的方式跟踪资源所有者数量，计数为0的时候自动释放资源<br>
  // 创建 shared_ptr<br>
  std::shared_ptr<int> p1 = std::make_shared<int>(20);<br>
  std::shared_ptr<int> p2 = p1; // 引用计数 +1<br>
  需要避免两个shared_ptr互相引用，导致引用计数器无法归零，可以将其中一个指针替换为weak_ptr<br>
  // 创建两个 shared_ptr 并互相引用
    std::shared_ptr<A> a = std::make_shared<A>();<br>
    std::shared_ptr<B> b = std::make_shared<B>();<br>
    a->b_ptr = b;  // a 引用 b<br>
    b->a_ptr = a;  // b 引用 a<br>
  
 （如果你学过操作系统文件管理中的共享文件打开文件表的话，理解应该不难，本题结束补充）<br>
3.std::weak_ptr(弱引用)<br>
  不增加引用计数，不拥有资源所有权，用于解决shared_ptr的循环引用问题，经常用于转换this指针<br>
4.auto_str(已经不使用了)<br>
  所有权转移时会导致原指针变为 nullptr，容易引发错误，不需要记忆<br>
  
note:智能指针是可以手动释放的，使用reset()//释放资源并将指针置为nullptr<br>

### 这里补充一下，面试官看到这里觉得你小子很懂了？？？，那么继续向下追问：你是否能写一下智能指针的实现

1.std::unique_str（这个的实现有点类似于设计模式中的懒汉模式的单例模式）
  template<typename T>
  class UniquePtr {
  private:
      T* ptr;
  public:
      explicit UniquePtr(T* p = nullptr) : ptr(p) {}//构造函数，explicit 关键字用于防止隐式类型转换​​
      ~UniquePtr() { delete ptr; }

    // 禁用复制
      UniquePtr(const UniquePtr&) = delete;
      UniquePtr& operator=(const UniquePtr&) = delete;

    // 支持移动语义
      UniquePtr(UniquePtr&& other) : ptr(other.ptr) { other.ptr = nullptr; }
      UniquePtr& operator=(UniquePtr&& other) {
          if (this != &other) {
              delete ptr;
              ptr = other.ptr;
              other.ptr = nullptr;
            }
        return *this;
      }
  };

2.std::shared_ptr
  这个实现比较复杂，读者可以自行查阅资料，涉及到的函数较多，但是不实现的话思想还是简单的<br>
  这里简单介绍一下：count计数私有化，随后构造函数中需要在参数列表中对其初始化，再有就是=运算符重载，实现所有权的共享，但是要注意的是这里需要实现对原有资源的释放，不然会造成内存泄露的（-_-）。<br>

### 本题花了好长时间啊，这里是之前承诺的补充

1.移动语义move<br>
  为C++11引入的核心特性，旨在转移资源所有权来提高程序性能，其实就是原指针置空，现指针指向当前资源<br>
2.操作系统的打开文件表<br>
  在操作系统中存在一个系统打开文件表，通过引用计数来跟踪共享文件的用户数量，这是实现多线程和多进程共享文件的核心机制之一<br>
  首选每个进程维护一个进程打开文件表，这个里面记录了进程打开的文件，同时表中的每个条目（文件描述符），注意打开文件最初是使用文件名去找寻文件对应的inode，找到后就可以使用文件描述符访问文件了<br>
  随后系统打开文件表中包含了所有被打开的文件，这里使用引用计数来标识有多少进程正在使用这个文件<br>

### C++11新特性的了解
1.自动类型推导（手撕的时候没少用）
2.智能指针，上面已经介绍
3.右值引用和移动语义
4.Lambda 表达式​ [capture](params){ body } //定义匿名函数，简化回调。上述顺序为捕获遍历，定义，函数体
5.nullptr 关键字​
6.override 和 final 关键字​：override​​：显式标记派生类虚函数覆盖基类虚函数，final​​：禁止类被继承或虚函数被覆盖
7.线程支持（std::thread, std::mutex 等）
8. 类型别名（using 替代 typedef）​
9. 默认和删除函数（=default, =delete）

2. 金山（有些题较为简单，不为赘述）
### C++ sort 的底层原理
这里其实原来问的是你如何优化快速排序，但是我最初只以为是随机选择基准，但是很显然面试官对此并不满意
闲暇之际，看到一篇介绍sort的原理的文章，才知道原来如是也
1.快速排序：作为主要算法，它通过选择一个pivot元素，将序列划分为两个子序列，一个子序列元素小于枢轴，另一个大于，随后递归排序，时间复杂度达到O(nlogn).
2.堆排序：为了避免快速排序在最坏情况下O(n^2)的最坏情况，当快速排序递归深度超过一定限制的时候，sort迅速切换到堆排序
3.插入排序：当处理小规模的子序列的时候，使用插入排序的性能更好


### 请介绍一下epoll，poll，select
select、poll 和 epoll 是三种Linux下实现 ​​I/O 多路复用
I/O多路复用指的是用一个线程监控多个文件描述符的动态变化
select（相当于逐个点名）：每次调用，都需要告知内核需要监控哪些文件描述符，内核进行标记，然后返回就绪的数量，用户自己还需要再遍历一次
poll（改进版逐一点名）：相对于select使用vector来存储监控的文件描述符，使得容量无限制
epoll（事件通知）：当有文件描述符需要服务的时候，才会通知，且返回的为需要服务的文件描述符，避免遍历
这里肯定就会有朋友问了，有了epoll还要poll干嘛：为了非Linux下使用

这里补充一下loop，绑定器和回调函数
loop：事件循环：​​事件循环​​是一个持续运行的循环结构，负责监听和分发事件。它通过 ​​非阻塞​​ 的方式处理多个任务，避免因等待某个操作（如文件读取）而阻塞整个程序。
  一般流程为循环开始 → 检查是否有事件 → 处理事件 → 等待新事件 → 循环继续
  note：上述三种select等是用于监听，后面这些是处理这些事件的流程
绑定器：绑定器​​用于将一个函数与特定的参数或上下文绑定，生成一个新的函数。通过占位符给函数一个固定的参数
回调函数：允许程序在等待耗时操作时不阻塞主线程。当某一事件发生时进行调用，

### 迭代器失效的场景
vector，这个容器为动态数组，相信学过操作系统分区分配的朋友一定知道，我如果在连续的存储空间中扩容的做法为再找一片空间，当前内容复制过去，再插入
那么由于迭代器（类似于指针），你地址都变了，我肯定失效了
deque（双端队列）：底层为分段连续的数组，插入会导致全部迭代器失效，规则复杂，这里不做赘述，自行了解
map/set/multimap/multiset：底层是红黑树，后面我会在数据结构章节介绍这种结构，插入删除不会失效
unordered_map/unordered_set（哈希表）：插入如果导致扩容，迭代器失效
note：删除操作肯定会导致当前迭代器失效，这很容易理解

### 请你介绍一下volatile关键字，并说说其应用场景
volatile的核心作用是，禁止编译器对该变量的访问进行优化​​，使用在多线程编程的情况中
但是不保证原子性，不如使用C++11提供的atomic，其保证原子性，是线程安全的，使用实例如下

#include <atomic> // 头文件
std::atomic<int> counter(0);  // 初始化原子计数器
counter.fetch_add(1, std::memory_order_relaxed);  // 原子递增
int value = counter.load(std::memory_order_acquire);  // 原子读取
counter.store(42, std::memory_order_release);     // 原子写入

### 


  
